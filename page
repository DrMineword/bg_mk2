PCFET0NUWVBFIGh0bWw-CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ-CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI-CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI-CiAgICA8dGl0bGU-RHluYW1pYyBIb21lPC90aXRsZT4KICAgIDxzdHlsZT4KICAgICAgICBib2R5IHsKICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICBmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7CiAgICAgICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4zcywgY29sb3IgMC4zczsKICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgICAgICBwYWRkaW5nOiAyMHB4OwogICAgICAgIH0KICAgICAgICAuYm94IHsKICAgICAgICAgICAgcGFkZGluZzogMTVweDsKICAgICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpOwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7CiAgICAgICAgICAgIG1hcmdpbjogMTBweCAwOwogICAgICAgICAgICBtYXgtd2lkdGg6IDQwMHB4OwogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICB9CiAgICAgICAgLnJlZGlyZWN0IHsKICAgICAgICAgICAgcGFkZGluZzogMTVweDsKICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZjsKICAgICAgICAgICAgbWFyZ2luOiAxMHB4IDA7CiAgICAgICAgICAgIHdpZHRoOiA5MCU7CiAgICAgICAgICAgIG1heC13aWR0aDogNTAwcHg7CiAgICAgICAgfQogICAgICAgIC5yZWRpcmVjdCBpbWcgewogICAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIGhlaWdodDogYXV0bzsKICAgICAgICAgICAgbWFyZ2luLXRvcDogMTBweDsKICAgICAgICB9CiAgICAgICAgLnZlcnNpb24gewogICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICAgICAgICAgIGJvdHRvbTogMTBweDsKICAgICAgICAgICAgcmlnaHQ6IDEwcHg7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDsKICAgICAgICAgICAgb3BhY2l0eTogMC44OwogICAgICAgIH0KICAgIDwvc3R5bGU-CjwvaGVhZD4KPGJvZHk-CgogICAgPGRpdiBpZD0iY29udGVudCI-PC9kaXY-CiAgICA8ZGl2IGlkPSJyZWRpcmVjdHMiPjwvZGl2PgogICAgPGRpdiBjbGFzcz0idmVyc2lvbiIgaWQ9InZlcnNpb24iPkxvYWRpbmcuLi48L2Rpdj4KCiAgICA8c2NyaXB0PgogICAgICAgIC8vIEZ1bmN0aW9uIHRvIHN0b3JlIGNvbnNvbGUgbG9ncyBpbiBsb2NhbFN0b3JhZ2UgKGJnX21rMl9hcnIpCiAgICAgICAgZnVuY3Rpb24gbG9nVG9TdG9yYWdlKG1lc3NhZ2UpIHsKICAgICAgICAgICAgbGV0IGxvZ3MgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJiZ19tazJfYXJyIikgfHwgIltdIik7CiAgICAgICAgICAgIGxvZ3MucHVzaChgWyR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfV0gJHttZXNzYWdlfWApOwogICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgiYmdfbWsyX2FyciIsIEpTT04uc3RyaW5naWZ5KGxvZ3MpKTsKICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7CiAgICAgICAgfQoKICAgICAgICAvLyBGdW5jdGlvbiB0byBnZW5lcmF0ZSB1bmlxdWUgVVJMIHBhcmFtZXRlcgogICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tUXVlcnkoKSB7CiAgICAgICAgICAgIHJldHVybiBgP3U9JHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDApfV8jJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgOCl9YDsKICAgICAgICB9CgogICAgICAgIC8vIEZ1bmN0aW9uIHRvIGNoZWNrIGlmIGRhdGEgbmVlZHMgcmVmcmVzaGluZwogICAgICAgIGZ1bmN0aW9uIHNob3VsZFJlZnJlc2goa2V5LCB0aW1lb3V0KSB7CiAgICAgICAgICAgIGxldCBzYXZlZFRpbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkgKyAiLXRpbWUiKTsKICAgICAgICAgICAgcmV0dXJuICFzYXZlZFRpbWUgfHwgRGF0ZS5ub3coKSA-IHBhcnNlSW50KHNhdmVkVGltZSk7CiAgICAgICAgfQoKICAgICAgICAvLyBGdW5jdGlvbiB0byBnZXQgVVJMIGZyb20gbG9jYWxTdG9yYWdlIG9yIGdlbmVyYXRlIGEgbmV3IG9uZQogICAgICAgIGZ1bmN0aW9uIGdldE9yR2VuZXJhdGVVcmwoa2V5LCBiYXNlVXJsLCB0aW1lb3V0KSB7CiAgICAgICAgICAgIGlmIChzaG91bGRSZWZyZXNoKGtleSwgdGltZW91dCkpIHsKICAgICAgICAgICAgICAgIGxldCBuZXdVcmwgPSBiYXNlVXJsICsgZ2VuZXJhdGVSYW5kb21RdWVyeSgpOwogICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBuZXdVcmwpOwogICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5ICsgIi10aW1lIiwgRGF0ZS5ub3coKSArIHRpbWVvdXQpOwogICAgICAgICAgICAgICAgbG9nVG9TdG9yYWdlKGBVcGRhdGVkICR7a2V5fTogJHtuZXdVcmx9YCk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3VXJsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpOwogICAgICAgIH0KCiAgICAgICAgLy8gRmV0Y2ggSlNPTiB3aXRoIGNhY2hpbmcgbG9naWMKICAgICAgICBmdW5jdGlvbiBmZXRjaFdpdGhDYWNoZSh1cmxLZXksIHVybCwgdGltZW91dCwgY2FsbGJhY2spIHsKICAgICAgICAgICAgbGV0IGZldGNoVXJsID0gZ2V0T3JHZW5lcmF0ZVVybCh1cmxLZXksIHVybCwgdGltZW91dCk7CiAgICAgICAgICAgIGZldGNoKGZldGNoVXJsKQogICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKQogICAgICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7CiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odXJsS2V5LCBKU09OLnN0cmluZ2lmeShkYXRhKSk7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBsb2dUb1N0b3JhZ2UoYEVycm9yIGxvYWRpbmcgJHt1cmxLZXl9OiAke2Vycn1gKSk7CiAgICAgICAgfQoKICAgICAgICAvLyBMb2FkIHZlcnNpb24gZGF0YQogICAgICAgIGZ1bmN0aW9uIGxvYWRWZXJzaW9uKCkgewogICAgICAgICAgICBsZXQgdmVyc2lvblVybCA9IGdldE9yR2VuZXJhdGVVcmwoImxvYWQtdmVyc2lvbiIsICJodHRwczovL2RybWluZXdvcmQuZ2l0aHViLmlvL2JnX21rMi92ZXJzaW9uIiwgMCk7CiAgICAgICAgICAgIGZldGNoKHZlcnNpb25VcmwpCiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpCiAgICAgICAgICAgICAgICAudGhlbihkYXRhID0-IHsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidmVyc2lvbiIpLmlubmVyVGV4dCA9IGAke2RhdGEudHlwZX0tJHtkYXRhLnZlcnNpb259LSR7ZGF0YS5tb2RlbF92ZXJzaW9ufWA7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3RTaGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiY29uc29sZS1zaGEiKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIWxhc3RTaGEgfHwgbGFzdFNoYSAhPT0gZGF0YS5jb25zb2xlX3NoYSkgewogICAgICAgICAgICAgICAgICAgICAgICBsb2dUb1N0b3JhZ2UoYENvbnNvbGUgU0hBIGNoYW5nZWQ6ICR7ZGF0YS5jb25zb2xlX3NoYX0sIHJlc2V0dGluZyBzdG9yZWQgVVJMc2ApOwogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgiY29uc29sZS1zaGEiLCBkYXRhLmNvbnNvbGVfc2hhKTsKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oImxvYWQtaG9tZSIpOwogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgibG9hZC1yZWRpcmVjdHMiKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgbG9hZEhvbWUoKTsKICAgICAgICAgICAgICAgICAgICBsb2FkUmVkaXJlY3RzKCk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBsb2dUb1N0b3JhZ2UoYEVycm9yIGxvYWRpbmcgdmVyc2lvbjogJHtlcnJ9YCkpOwogICAgICAgIH0KCiAgICAgICAgLy8gTG9hZCBob21lIHBhZ2Ugc3RydWN0dXJlCiAgICAgICAgZnVuY3Rpb24gbG9hZEhvbWUoKSB7CiAgICAgICAgICAgIGZldGNoV2l0aENhY2hlKCJsb2FkLWhvbWUiLCAiaHR0cHM6Ly9kcm1pbmV3b3JkLmdpdGh1Yi5pby9iZ19tazIvY29udGVudHMvbWFpbi9ob21lIiwgNyAqIDYwICogMTAwMCwgZGF0YSA9PiB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGRhdGEuYmFja2dyb3VuZF9jb2xvciB8fCAiIzIyMiI7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmNvbG9yID0gZGF0YS50ZXh0X2NvbG9yIHx8ICIjZmZmIjsKICAgICAgICAgICAgICAgIGxldCBjb250ZW50RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImNvbnRlbnQiKTsKICAgICAgICAgICAgICAgIGNvbnRlbnREaXYuaW5uZXJIVE1MID0gIiI7CiAgICAgICAgICAgICAgICBkYXRhLnNlY3Rpb25zLmZvckVhY2goc2VjdGlvbiA9PiB7CiAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IHNlY3Rpb24uaHRtbDsKICAgICAgICAgICAgICAgICAgICBjb250ZW50RGl2LmFwcGVuZENoaWxkKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgLy8gTG9hZCByZWRpcmVjdCBsaXN0CiAgICAgICAgZnVuY3Rpb24gbG9hZFJlZGlyZWN0cygpIHsKICAgICAgICAgICAgZmV0Y2hXaXRoQ2FjaGUoImxvYWQtcmVkaXJlY3RzIiwgImh0dHBzOi8vZHJtaW5ld29yZC5naXRodWIuaW8vYmdfbWsyL2NvbnRlbnRzL21haW4vcmVkaXJlY3RzIiwgNyAqIDYwICogMTAwMCwgZGF0YSA9PiB7CiAgICAgICAgICAgICAgICBsZXQgcmVkaXJlY3RzRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInJlZGlyZWN0cyIpOwogICAgICAgICAgICAgICAgcmVkaXJlY3RzRGl2LmlubmVySFRNTCA9ICIiOwogICAgICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGl0ZW0gPT4gewogICAgICAgICAgICAgICAgICAgIGxldCByZWRpcmVjdERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0RGl2LmNsYXNzTmFtZSA9ICJyZWRpcmVjdCI7CiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3REaXYuaW5uZXJIVE1MID0gYDxoMz4ke2l0ZW0udGl0bGV9PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iJHtpdGVtLnVybH0iIHRhcmdldD0iX2JsYW5rIj5HbyB0byAke2l0ZW0udGl0bGV9PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAke2l0ZW0uZGVzY3JpcHRpb24gPyBgPGRpdj4ke2l0ZW0uZGVzY3JpcHRpb259PC9kaXY-YCA6ICIifQogICAgICAgICAgICAgICAgICAgICAgICAke2l0ZW0uaW1hZ2UgPyBgPGltZyBzcmM9IiR7aXRlbS5pbWFnZX0iIGFsdD0iJHtpdGVtLnRpdGxlfSI-YCA6ICIifWA7CiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RzRGl2LmFwcGVuZENoaWxkKHJlZGlyZWN0RGl2KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGxvYWRWZXJzaW9uKCk7CiAgICA8L3NjcmlwdD4KCjwvYm9keT4KPC9odG1sPg
