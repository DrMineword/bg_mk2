<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Home</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            font-family: Arial, sans-serif;
            transition: background-color 0.3s, color 0.3s;
            margin: 0;
            padding: 20px;
        }
        .box {
            padding: 15px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            margin: 10px 0;
            max-width: 400px;
            width: 100%;
        }
        .redirect {
            padding: 15px;
            border: 1px solid #fff;
            margin: 10px 0;
            width: 90%;
            max-width: 500px;
        }
.jump-to-content {
    display: inline-block;
    color: white;
    text-decoration: none;
    font-weight: bold;
    font-size: 16px;
    background: linear-gradient(45deg, #ff6ec7, #ff8a00, #42e695, #3bb2b8);
    background-size: 400% 400%;
    color: transparent;
    -webkit-background-clip: text;
    animation: gradientAnimation 4s ease infinite;
    padding: 10px 20px;
    border-radius: 5px;
    transition: transform 0.2s;
}

.jump-to-content:hover {
    transform: scale(1.1);
}

@keyframes gradientAnimation {
    0% {
        background-position: 400% 0;
    }
    50% {
        background-position: 0 100%;
    }
    100% {
        background-position: 400% 0;
    }
}

        .redirect img {
            max-width: 100%;
            height: auto;
            margin-top: 10px;
        }
        .version {
            position: fixed;
            bottom: 10px;
            right: 10px;
            font-size: 12px;
            opacity: 0.8;
        }
    </style>
</head>
<body>

    <div id="content"></div>
    <div id="redirects"></div>
    <div class="version" id="version"><cfont cfont="UPLOAD_1737833486_ukxxftlxt">Loading...</cfont></div>
    <script>
        function logToStorage(message) {
            let logs = JSON.parse(localStorage.getItem("bg_mk2_arr") || "[]");
            logs.push(`[${new Date().toISOString()}] ${message}`);
            localStorage.setItem("bg_mk2_arr", JSON.stringify(logs));
            console.log(message);
        }

        function generateRandomQuery() {
            return `?u=${Math.floor(Math.random() * 100000)}_#${Math.random().toString(36).substring(2, 8)}`;
        }

        function shouldRefresh(key, timeout) {
            let savedTime = localStorage.getItem(key + "-time");
            return !savedTime || Date.now() > parseInt(savedTime);
        }

        function encodeData(data) {
            return btoa(unescape(encodeURIComponent(JSON.stringify(data))));
        }

        function decodeData(data) {
            try {
                return JSON.parse(decodeURIComponent(escape(atob(data))));
            } catch (e) {
                logToStorage(`Error decoding ${data}: ${e}`);
                return null;
            }
        }

        function fetchWithCache(urlKey, url, timeout, callback) {
            let fetchUrl = getOrGenerateUrl(urlKey, url, timeout);
            fetch(fetchUrl)
                .then(response => response.json())
                .then(data => {
                    let encodedData = encodeData(data);
                    localStorage.setItem(urlKey, encodedData);
                    callback(data);
                })
                .catch(err => logToStorage(`Error fetching ${urlKey}: ${err}`));
        }

        function getOrGenerateUrl(key, baseUrl, timeout) {
            if (shouldRefresh(key, timeout)) {
                let newUrl = baseUrl + generateRandomQuery();
                localStorage.setItem(key, newUrl);
                localStorage.setItem(key + "-time", Date.now() + timeout);
                logToStorage(`Updated ${key}: ${newUrl}`);
                return newUrl;
            }
            return localStorage.getItem(key);
        }

        function loadVersion() {
            let versionUrl = getOrGenerateUrl("load-version", "https://drmineword.github.io/bg_mk2/version", 0);
            fetch(versionUrl)
                .then(response => response.json())
                .then(data => {
                    document.getElementById("version").innerText = `${data.type}-${data.version}-${data.model_version}`;
                    
                    let lastSha = localStorage.getItem("console-sha");
                    let lastShaRaw = localStorage.getItem("console-sha-raw");

                    if (!lastSha || lastSha !== data.console_sha) {
                        logToStorage(`Console SHA changed: ${data.console_sha}, resetting stored URLs`);
                        localStorage.setItem("console-sha", data.console_sha);
                        localStorage.setItem("console-sha-raw", JSON.stringify(data.console_sha));
                        localStorage.removeItem("load-home");
                        localStorage.removeItem("load-redirects");
                    } else {
                        logToStorage(`Console SHA unchanged: ${data.console_sha} (Previous: ${lastShaRaw})`);
                    }

                    loadHome();
                    loadRedirects();
                })
                .catch(err => logToStorage(`Error loading version: ${err}`));
        }

        function loadHome() {
            fetchWithCache("load-home", "https://drmineword.github.io/bg_mk2/contents/main/home", 7 * 60 * 1000, data => {
                document.body.style.backgroundColor = data.background_color || "#222";
                document.body.style.color = data.text_color || "#fff";
                let contentDiv = document.getElementById("content");
                contentDiv.innerHTML = "";

                data.sections.forEach(section => {
                    let element = document.createElement("div");
                    element.innerHTML = section.html;
                    contentDiv.appendChild(element);
                });
            });
        }

        function loadRedirects() {
            fetchWithCache("load-redirects", "https://drmineword.github.io/bg_mk2/contents/main/redirects", 7 * 60 * 1000, data => {
                let redirectsDiv = document.getElementById("redirects");
                redirectsDiv.innerHTML = "";

                data.forEach(item => {
                    let redirectDiv = document.createElement("div");
                    redirectDiv.className = "redirect";
                    redirectDiv.innerHTML = `<h3>${item.title}</h3>
                        <a href="${item.url}" target="_blank">Go to ${item.title}</a>
                        ${item.description ? `<div>${item.description}</div>` : ""}
                        ${item.image ? `<img src="${item.image}" alt="${item.title}">` : ""}`;
                    redirectsDiv.appendChild(redirectDiv);
                });
            });
        }

        function loadDataFromStorage() {
            let homeData = decodeData(localStorage.getItem("load-home"));
            let redirectData = decodeData(localStorage.getItem("load-redirects"));

            if (homeData) {
                document.body.style.backgroundColor = homeData.background_color || "#222";
                document.body.style.color = homeData.text_color || "#fff";
                let contentDiv = document.getElementById("content");
                contentDiv.innerHTML = "";

                homeData.sections.forEach(section => {
                    let element = document.createElement("div");
                    element.innerHTML = section.html;
                    contentDiv.appendChild(element);
                });
            }

            if (redirectData) {
                let redirectsDiv = document.getElementById("redirects");
                redirectsDiv.innerHTML = "";

                redirectData.forEach(item => {
                    let redirectDiv = document.createElement("div");
                    redirectDiv.className = "redirect";
                    redirectDiv.innerHTML = `<h3>${item.title}</h3>
                        <a href="${item.url}" target="_blank" class="jump-to-content">Jump To Content</a>
                        ${item.description ? `<div>${item.description}</div>` : ""}
                        ${item.image ? `<img src="${item.image}" alt="${item.title}">` : ""}`;
                    redirectsDiv.appendChild(redirectDiv);
                });
            }
        }

        loadDataFromStorage();
        loadVersion();

// fonts start
const ARRAY_LIST_URL = 'https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/fonts/remote_upload/list/array.list';

// Background: Load array list
let fontArray = null;

(async function loadFontArray() {
    try {
        const response = await fetch(ARRAY_LIST_URL);
        if (!response.ok) throw new Error('Failed to load font array list.');
        fontArray = await response.json();
        console.log('Font array list loaded successfully:', fontArray);
    } catch (error) {
        console.error('Error loading font array list:', error);
    }
})();

// Function to load font by ID
async function loadfont(fontId) {
    if (!fontArray) {
        console.error('Font array not loaded yet. Please wait or check for errors.');
        return;
    }

    try {
        // Find the font entry by ID
        const fontEntry = fontArray.list.find(font => font.id === fontId);
        if (!fontEntry) {
            console.error(`Font with ID "${fontId}" not found.`);
            return;
        }

        console.log(`Loading font: ${fontEntry.data.title}`);

        // Fetch the raw_url to get the font data
        const fontResponse = await fetch(fontEntry.raw_url);
        if (!fontResponse.ok) throw new Error('Failed to fetch font data.');
        const fontData = await fontResponse.json();

        // Find the appropriate script template based on type
        const scriptTemplate = fontArray.script_array.find(script => {
            const fileFormat = fontEntry.data.original_file_format;
            if (fileFormat === '.zip') return script.type === 'zip';
            if (['.ttf', '.woff', '.woff2', '.otf'].includes(fileFormat)) return script.type === fileFormat || script.type === fileFormat.replace('.', '');
            return false;
        });

        if (!scriptTemplate) {
            console.error(`No script template found for type: ${fontEntry.data.original_file_format}`);
            return;
        }

        // Log the console_log value
        if (scriptTemplate.console_log) {
            console.log('Script console_log:', scriptTemplate.console_log);
        }

        // Replace ${base64} in the script with the actual base64 content
        const scriptContent = scriptTemplate.script.replace('${base64}', fontData.base64);

        // Create and execute the script dynamically
        const scriptElement = document.createElement('script');
        scriptElement.textContent = scriptContent;
        document.body.appendChild(scriptElement);

        console.log(`Font "${fontEntry.data.title}" loaded successfully.`);
    } catch (error) {
        console.error('Error loading font:', error);
    }
}

// Example to load: loadfont('UPLOAD_1735412499_x8fv2i4tr');

(async function loadCustomFontLoaderScript() {
            const scriptUrl = 'https://raw.githubusercontent.com/DrMineword/Artefact-Boost-Active/refs/heads/main/fonts/remote_upload/standalonerun/customloader.execute';
            try {
                const response = await fetch(scriptUrl);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const scriptContent = await response.text();
                const script = document.createElement('script');
                script.type = 'text/javascript';
                script.textContent = scriptContent;
                document.head.appendChild(script);
                console.log('Custom font loader script loaded and executed successfully.');
            } catch (error) {
                console.error('Failed to load and execute the custom font loader script.', error);
            }
        })();

// Example to load:  <p><cfont cfont="UPLOAD_1735484919_em4zt1546">This is text in yet another custom font.</cfont></p>;

// fonts end


loadfont('UPLOAD1737833486_ukxxftlxt');
    </script>

</body>
</html>
